package lotto

import "errors"

var PlayMethod = map[string]MethodEngine{
	SscNumber1:          BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SscNumber2:          BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SscNumber3:          BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SscNumber4:          BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{3}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SscNumber5:          BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{4}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SscTwoSide1:         BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscTwoSide},
	SscTwoSide2:         BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscTwoSide},
	SscTwoSide3:         BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscTwoSide},
	SscTwoSide4:         BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{3}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscTwoSide},
	SscTwoSide5:         BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{4}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscTwoSide},
	SscTwoSideSum:       BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{0, 1, 2, 3, 4}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscTwoSideSum},
	SscExtraFirstThree:  BaseMethod{opt: Opt{BetList: []string{BaoZi, ShunZi, DuiZi, BanShun, ZaLiu}, Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscExtra},
	SscExtraMiddleThree: BaseMethod{opt: Opt{BetList: []string{BaoZi, ShunZi, DuiZi, BanShun, ZaLiu}, Bit: []int{1, 2, 3}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscExtra},
	SscExtraAfterThree:  BaseMethod{opt: Opt{BetList: []string{BaoZi, ShunZi, DuiZi, BanShun, ZaLiu}, Bit: []int{2, 3, 4}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSscExtra},

	SyxwNumber1:     BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])$", Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SyxwNumber2:     BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])$", Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SyxwNumber3:     BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])$", Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SyxwNumber4:     BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])$", Bit: []int{3}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SyxwNumber5:     BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])$", Bit: []int{4}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	SyxwTwoSide1:    BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSyxwTwoSide},
	SyxwTwoSide2:    BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSyxwTwoSide},
	SyxwTwoSide3:    BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSyxwTwoSide},
	SyxwTwoSide4:    BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{3}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSyxwTwoSide},
	SyxwTwoSide5:    BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{4}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSyxwTwoSide},
	SyxwTwoSideSum:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, WeiDa, WeiXiao}, Bit: []int{0, 1, 2, 3, 4}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinSyxwTwoSideSum},
	SyxwOption1Win1: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{1, 1}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption2Win2: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){1})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{2, 2}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption3Win3: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){2})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{3, 3}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption4Win4: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){3})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{4, 4}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption5Win5: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){4})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{5, 5}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption6Win5: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){5})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{6, 5}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption7Win5: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){6})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{7, 5}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwOption8Win5: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){7})$", Bit: []int{0, 1, 2, 3, 4}, OptionWin: []int{8, 5}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwOptionWin, findWinFunc: FindWinSyxwOptionWin},
	SyxwGroup2First: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){1,4})$", Bit: []int{0, 1}, OptionWin: []int{2}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwGroup, findWinFunc: FindWinSyxwGroupWin},
	SyxwGroup3First: BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){2,4})$", Bit: []int{0, 1, 2}, OptionWin: []int{3}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountSyxwGroup, findWinFunc: FindWinSyxwGroupWin},
	Syxw2First:      BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){1})$", Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountNotRepeat, findWinFunc: FindWinSyxwZhixuan},
	Syxw3First:      BaseMethod{opt: Opt{BetReg: "^([1-9]|1[0-1])((,([1-9]|1[0-1])){2})$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetRegNotRepeat, getBetCountFunc: GetCountNotRepeat, findWinFunc: FindWinSyxwZhixuan},

	K3Sum:     BaseMethod{opt: Opt{BetReg: "^([4-9]|1[0-7])$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinKuai3Sum},
	K33Jun:    BaseMethod{opt: Opt{BetReg: "^[1-6]$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinKuai33Jun},
	K3TwoSide: BaseMethod{opt: Opt{BetList: []string{Big, Small}, Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinKuai3TwoSide},
	K3Weitou:  BaseMethod{opt: Opt{BetReg: "^(111|222|333|444|555|666)$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinKuai3Weitou},
	K3Quantou: BaseMethod{opt: Opt{BetReg: "^1$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinKuai3Quantou},
	K3Chang:   BaseMethod{opt: Opt{BetReg: "^(1[2-6]|2[3-6]|3[4-6]|4[5-6])$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinKuai3Chang},
	K3Duan:    BaseMethod{opt: Opt{BetReg: "^(11|22|33|44|55|66)$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinKuai3Duan},

	PK10Number1:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number2:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number3:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number4:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{3}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number5:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{4}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number6:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{5}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number7:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{6}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number8:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{7}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number9:   BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{8}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10Number10:  BaseMethod{opt: Opt{BetReg: "^([1-9]|10)$", Bit: []int{9}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	PK10TwoSide1:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide2:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide3:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide4:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{3}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide5:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{4}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide6:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{5}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide7:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{6}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide8:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{7}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide9:  BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{8}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSide10: BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, Dragon, Tiger, He}, Bit: []int{9}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10TwoSide},
	PK10TwoSideGY: BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinPK10GYTwoSide},
	PK10NumberGY:  BaseMethod{opt: Opt{BetReg: "^([3-9]|1[0-9])$", Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinPK10GY},

	F3DCombo1:        BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{0, 1, 2}, OptionWin: []int{1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DCombo},
	F3DCombo2:        BaseMethod{opt: Opt{BetReg: "^\\d{2}$", Bit: []int{0, 1, 2}, OptionWin: []int{2}}, checkBetLegalFunc: CheckBetRegF3DCombo, getBetCountFunc: GetCountF3DCombo, findWinFunc: FindWinF3DCombo},
	F3DCombo3:        BaseMethod{opt: Opt{BetReg: "^\\d{3}$", Bit: []int{0, 1, 2}, OptionWin: []int{3}}, checkBetLegalFunc: CheckBetRegF3DCombo, getBetCountFunc: GetCountF3DCombo, findWinFunc: FindWinF3DCombo},
	F3DNumberB:       BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	F3DNumberS:       BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	F3DNumberG:       BaseMethod{opt: Opt{BetReg: "^\\d{1}$", Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinDig},
	F3DNumberBS:      BaseMethod{opt: Opt{BetReg: "^\\d{2}$", Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DNumberMultiple},
	F3DNumberBG:      BaseMethod{opt: Opt{BetReg: "^\\d{2}$", Bit: []int{0, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DNumberMultiple},
	F3DNumberSG:      BaseMethod{opt: Opt{BetReg: "^\\d{2}$", Bit: []int{1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DNumberMultiple},
	F3DNumberBSG:     BaseMethod{opt: Opt{BetReg: "^\\d{3}$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DNumberMultiple},
	F3DSumBS:         BaseMethod{opt: Opt{BetReg: "^([0-9]|1[0-8])$", Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSum},
	F3DSumBG:         BaseMethod{opt: Opt{BetReg: "^([0-9]|1[0-8])$", Bit: []int{0, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSum},
	F3DSumSG:         BaseMethod{opt: Opt{BetReg: "^([0-9]|1[0-8])$", Bit: []int{1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSum},
	F3DSumBSG:        BaseMethod{opt: Opt{BetReg: "^([0-9]|1[0-9]|2[0-7])$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSum},
	F3DSumWeiBS:      BaseMethod{opt: Opt{BetReg: "^\\d$", Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSumWei},
	F3DSumWeiBG:      BaseMethod{opt: Opt{BetReg: "^\\d$", Bit: []int{0, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSumWei},
	F3DSumWeiSG:      BaseMethod{opt: Opt{BetReg: "^\\d$", Bit: []int{1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSumWei},
	F3DSumWeiBSG:     BaseMethod{opt: Opt{BetReg: "^\\d$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DSumWei},
	F3DInterval:      BaseMethod{opt: Opt{BetReg: "^\\d$", Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalReg, getBetCountFunc: GetCount, findWinFunc: FindWinF3DKuaidu},
	F3DTwoSideB:      BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, ZhiShu, HeShu}, Bit: []int{0}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide},
	F3DTwoSideS:      BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, ZhiShu, HeShu}, Bit: []int{1}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide},
	F3DTwoSideG:      BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even, ZhiShu, HeShu}, Bit: []int{2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide},
	F3DTwoSideSumBS:  BaseMethod{opt: Opt{BetList: []string{Odd, Even}, Bit: []int{0, 1}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide1},
	F3DTwoSideSumBG:  BaseMethod{opt: Opt{BetList: []string{Odd, Even}, Bit: []int{0, 2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide1},
	F3DTwoSideSumSG:  BaseMethod{opt: Opt{BetList: []string{Odd, Even}, Bit: []int{1, 2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide1},
	F3DTwoSideSumBSG: BaseMethod{opt: Opt{BetList: []string{Big, Small, Odd, Even}, Bit: []int{0, 1, 2}}, checkBetLegalFunc: CheckBetLegalList, getBetCountFunc: GetCount, findWinFunc: FindWinF3DTwoSide2},
}

func GetMethodEngine(method string) (MethodEngine, error) {
	if methodObj, ok := PlayMethod[method]; ok {
		return methodObj, nil
	}
	return nil, errors.New("未找到该玩法")
}
